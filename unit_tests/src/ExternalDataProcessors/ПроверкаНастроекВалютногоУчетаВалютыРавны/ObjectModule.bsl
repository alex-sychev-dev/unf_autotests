Перем КонтекстЯдра;
Перем Утверждения;

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов, КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	
	НаборТестов.Добавить("ТестНастроек_ВалютныеОперацииВключены");
	НаборТестов.Добавить("ТестНастроек_ВалютаРеглРавнаВалютеУпр");
	НаборТестов.Добавить("ПроверитьНаличиеКурсовыхРазницПоставщики");
	НаборТестов.Добавить("ПроверитьНаличиеКурсовыхРазницПокупатели");
	НаборТестов.Добавить("ПроверитьПроведениеПриходныхНакладных");
	//НаборТестов.Добавить("ПроверитьОтменуПроведенияПриходныхНакладных");

КонецПроцедуры


#Область Тесты

Процедура ТестНастроек_ВалютныеОперацииВключены() Экспорт
	Утверждения.ПроверитьИстину(ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций"));
КонецПроцедуры

Процедура ТестНастроек_ВалютаРеглРавнаВалютеУпр() Экспорт
	Утверждения.ПроверитьРавенство(Константы.ВалютаУчета.Получить(), Константы.НациональнаяВалюта.Получить());
КонецПроцедуры

Процедура ПроверитьНаличиеКурсовыхРазницПоставщики() Экспорт
	
	Период = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетыСПоставщикамиОстатки.Организация,
		|	РасчетыСПоставщикамиОстатки.ТипРасчетов,
		|	РасчетыСПоставщикамиОстатки.Контрагент,
		|	РасчетыСПоставщикамиОстатки.Договор,
		|	РасчетыСПоставщикамиОстатки.Документ,
		|	РасчетыСПоставщикамиОстатки.Заказ,
		|	РасчетыСПоставщикамиОстатки.СуммаОстаток,
		|	РасчетыСПоставщикамиОстатки.СуммаВалОстаток,
		|	РасчетыСПоставщикамиОстатки.СуммаРегОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&Период,) КАК РасчетыСПоставщикамиОстатки
		|ГДЕ
		|	РасчетыСПоставщикамиОстатки.СуммаОстаток = 0
		|	И (РасчетыСПоставщикамиОстатки.СуммаВалОстаток <> 0
		|	ИЛИ РасчетыСПоставщикамиОстатки.СуммаРегОстаток <> 0)
		|	ИЛИ РасчетыСПоставщикамиОстатки.СуммаВалОстаток = 0
		|	И (РасчетыСПоставщикамиОстатки.СуммаОстаток <> 0
		|	ИЛИ РасчетыСПоставщикамиОстатки.СуммаРегОстаток <> 0)";
	
	Запрос.УстановитьПараметр("Период", Период);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ШаблонСтроки = "%1 - %2 - %3 - %4 - %5 - %6 Сумма=%7 СуммаВ=%8 СуммаР=%9"+ Символы.ПС;
	Сообщение = "";
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ВыборкаДетальныеЗаписи.Организация);
		МассивПараметров.Добавить(ВыборкаДетальныеЗаписи.ТипРасчетов);
		МассивПараметров.Добавить(ВыборкаДетальныеЗаписи.Контрагент);
		МассивПараметров.Добавить(ВыборкаДетальныеЗаписи.Договор);
		МассивПараметров.Добавить(ВыборкаДетальныеЗаписи.Документ);
		МассивПараметров.Добавить(ВыборкаДетальныеЗаписи.Заказ);
		МассивПараметров.Добавить(ВыборкаДетальныеЗаписи.СуммаОстаток);
		МассивПараметров.Добавить(ВыборкаДетальныеЗаписи.СуммаВалОстаток);
		МассивПараметров.Добавить(ВыборкаДетальныеЗаписи.СуммаРегОстаток);
		
		СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтрокуИзМассива(ШаблонСтроки, МассивПараметров);
		
		Сообщение = Сообщение + СтрокаОшибки;
		
	КонецЦикла;
	
	Утверждения.ПроверитьРавенство(ВыборкаДетальныеЗаписи.Количество(), 0, Сообщение);
	
КонецПроцедуры

Процедура ПроверитьНаличиеКурсовыхРазницПокупатели() Экспорт
	
	Период = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетыСПокупателямиОстатки.Организация,
		|	РасчетыСПокупателямиОстатки.ТипРасчетов,
		|	РасчетыСПокупателямиОстатки.Контрагент,
		|	РасчетыСПокупателямиОстатки.Договор,
		|	РасчетыСПокупателямиОстатки.Документ,
		|	РасчетыСПокупателямиОстатки.Заказ,
		|	РасчетыСПокупателямиОстатки.СуммаОстаток,
		|	РасчетыСПокупателямиОстатки.СуммаВалОстаток,
		|	РасчетыСПокупателямиОстатки.СуммаРегОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями.Остатки(&Период,) КАК РасчетыСПокупателямиОстатки
		|ГДЕ
		|	РасчетыСПокупателямиОстатки.СуммаОстаток = 0
		|	И (РасчетыСПокупателямиОстатки.СуммаВалОстаток <> 0
		|	ИЛИ РасчетыСПокупателямиОстатки.СуммаРегОстаток <> 0)
		|	ИЛИ РасчетыСПокупателямиОстатки.СуммаВалОстаток = 0
		|	И (РасчетыСПокупателямиОстатки.СуммаОстаток <> 0
		|	ИЛИ РасчетыСПокупателямиОстатки.СуммаРегОстаток <> 0)";
	
	Запрос.УстановитьПараметр("Период", Период);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ШаблонСтроки = "%1 - %2 - %3 - %4 - %5 - %6 Сумма=%7 СуммаВ=%8 СуммаР=%9"+ Символы.ПС;
	Сообщение = "";
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ВыборкаДетальныеЗаписи.Организация);
		МассивПараметров.Добавить(ВыборкаДетальныеЗаписи.ТипРасчетов);
		МассивПараметров.Добавить(ВыборкаДетальныеЗаписи.Контрагент);
		МассивПараметров.Добавить(ВыборкаДетальныеЗаписи.Договор);
		МассивПараметров.Добавить(ВыборкаДетальныеЗаписи.Документ);
		МассивПараметров.Добавить(ВыборкаДетальныеЗаписи.Заказ);
		МассивПараметров.Добавить(ВыборкаДетальныеЗаписи.СуммаОстаток);
		МассивПараметров.Добавить(ВыборкаДетальныеЗаписи.СуммаВалОстаток);
		МассивПараметров.Добавить(ВыборкаДетальныеЗаписи.СуммаРегОстаток);
		
		СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтрокуИзМассива(ШаблонСтроки, МассивПараметров);
		
		Сообщение = Сообщение + СтрокаОшибки;
		
	КонецЦикла;
	
	Утверждения.ПроверитьРавенство(ВыборкаДетальныеЗаписи.Количество(), 0, Сообщение);
	
КонецПроцедуры

Процедура ПроверитьПроведениеПриходныхНакладных() Экспорт
	
	Период = '20170101';
	ТипДокумента = "ПриходнаяНакладная";
	РежимЗаписи = РежимЗаписиДокумента.Проведение;
	ОткатыватьТранзакцию = Истина;
	
	СообщениеОбОшибках = СформироватьСообщенияОбОшибкахЗаписиДокументов(Период, ТипДокумента, РежимЗаписи, ОткатыватьТранзакцию);
	Утверждения.ПроверитьНеЗаполненность(СообщениеОбОшибках, СообщениеОбОшибках);
	
КонецПроцедуры

Процедура ПроверитьОтменуПроведенияПриходныхНакладных() Экспорт
	
	Период = '20170101';
	ТипДокумента = "ПриходнаяНакладная";
	РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	ОткатыватьТранзакцию = Истина;
	
	СообщениеОбОшибках = СформироватьСообщенияОбОшибкахЗаписиДокументов(Период, ТипДокумента, РежимЗаписи, ОткатыватьТранзакцию);
	Утверждения.ПроверитьНеЗаполненность(СообщениеОбОшибках, СообщениеОбОшибках);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыФункции

Функция СформироватьСообщенияОбОшибкахЗаписиДокументов(Период, ТипДокумента, РежимЗаписи, ОткатыватьТранзакцию = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ." + ТипДокумента + " КАК Док
		|ГДЕ
		|	Док.Проведен
		|И Док.Дата >= &Период";
	
	Запрос.УстановитьПараметр("Период", Период);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ШаблонСтроки = "%1 - %2"+ Символы.ПС;
	СообщениеОбОшибках = "";
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ОткатыватьТранзакцию Тогда
			НачатьТранзакцию();
		КонецЕсли;
		Попытка
			ДокументОбъект.Записать(РежимЗаписи);
		Исключение
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(Выборка.Ссылка);
			МассивПараметров.Добавить(ОписаниеОшибки());
			СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтрокуИзМассива(ШаблонСтроки, МассивПараметров);
			СообщениеОбОшибках = СообщениеОбОшибках + СтрокаОшибки;
		КонецПопытки;
		
		Если ОткатыватьТранзакцию Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СообщениеОбОшибках;
	
КонецФункции

#КонецОбласти
